#!/usr/bin/env node
require('es6-shim'); // for Map, endsWith, etc.
require('prfun');

var program = require('commander');
var bundler = require('../');
var fs = require('fs');
var util = require('util');

var P = require('../lib/p');

program
	.version(bundler.version)
	.usage('[options] <title> [title...]')
	.option('-m, --metabook <metabook.json>',
			'Use article list and structure from the specified json file')
	.option('-d, --directory <dirname>',
			'Don\'t zip up the output bundle; leave it in <dirname>')
	.option('-o, --output <filename>',
			'Save zip to the given <filename>', null)
	.option('-p, --prefix <prefix>',
			'Which wiki prefix to use to resolve the title [enwiki]', 'enwiki')
	.option('-a, --api <url>',
			'Parsoid API root', 'http://parsoid-lb.eqiad.wikimedia.org/')
	.option('-t, --toc <yes|no|auto>',
			'Force presence/absence of toc [auto]', 'auto')
	.option('-L, --lang <2-char lang code>',
			'Force collection to use the given default language', null)
	.option('-s, --size <max image size>',
			'Force the given maximum image dimension (in pixels)', null)
	.option('--title <title>',
			'Set the title of the generated collection', null)
	// set this to true to emit deprecated file formats for better pediapress
	// compatibility
	.option('--no-compat',
			'Omit redundant data used for backward-compatibility')
	// follow redirects? disable if front-end is known to give good titles.
	.option('--no-follow',
			'Don\'t follow article title redirects')
	// robustness
	.option('--retries <max retries>',
			'Retry failing HTTP requests (default 3)')
	.option('--timeout <milliseconds>',
			'Timeout for all HTTP requests (default 60 seconds)')
	.option('-v, --verbose',
			'Print verbose progress information')
	.option('-D, --debug',
			'Turn on debugging features (eg, full stack traces on exceptions)')
program.on('--help', function() {
	console.log('  If -o is omitted, creates bundle.zip');
	console.log('  The -m option can be used instead of specifying titles');
});

program.parse(process.argv);

if (program.args.length === 0 && !program.metabook) {
	console.error('Either the -m option or a page title is required.');
	return 1;
}
if (program.metabook && program.args.length > 0) {
	console.error('Too many arguments.');
	return 1;
}

if (program.retries !== undefined) {
   require('../lib/retry-request').DEFAULT_RETRIES = program.retries;
}
if (program.timeout !== undefined) {
   require('../lib/retry-request').DEFAULT_TIMEOUT = program.timeout;
}

var log = function() {
	try {
		// en/disable log messages here
		if (program.verbose || program.debug) {
			console.error.apply(console, arguments);
		}
		if (process.send) {
			process.send({
				type: 'log',
				level: 'info',
				message: util.format.apply(null, arguments)
			});
		}
	} catch (err) {
		// This should never happen!  But don't try to convert arguments
		// toString() if it does, since that might fail too.
		console.error("Could not format message!", err);
		if (process.send) {
			process.send({
				type: 'log',
				level: 'error',
				message: 'Could not format message! ' + err,
				stack: err.stack
			});
		}
	}
};

var p = Promise.resolve();

// Load metabook.json
if (program.metabook) {
	// Load from file and parse JSON
	p = p.then(function() {
		return P.call(fs.readFile, fs, program.metabook, 'utf8');
	}).then(function(data) {
		return JSON.parse(data);
	});
} else {
	// Create a metabook.json from the given prefix and page titles
	p = p.then(function() {
		return bundler.metabook.fromArticles(program.args.map(function(t) {
			return { prefix: program.prefix, title: t };
		}), program);
	});
}

// set default output filename
if ((!program.directory) && (!program.output)) {
	program.output = "bundle.zip";
}

// okay, do it!
p = p.then(function(metabook) {
	if (program.title) {
		metabook.title = program.title;
	}
	return bundler.bundle(metabook, {
		nozip: !!program.directory,
		output: program.directory || program.output,
		debug: !!program.debug,
		compat: !!program.compat, // pediapress compatibility
		follow: !!program.follow, // follow redirects
		parsoid: program.api,
		toc: program.toc,
		size: program.size,
		log: log
	});
}).catch(function(err) {
	var msg = {
		type: 'log',
		level: 'error'
	};
	if ( err instanceof Error ) {
		msg.message = err.message;
		msg.stack = err.stack;
	} else {
		msg.message = '' + err;
	}
	console.error( (program.debug && msg.stack) || msg.message );
	// process.send is sync, so we won't exit before this is sent (yay)
	if (process.send) {
		process.send(msg);
	}
	process.exit(err.exitCode || 1);
}).done();
