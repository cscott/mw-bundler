#!/usr/bin/env node
require('es6-shim'); // for Map, endsWith, etc.
require('when/monitor/console'); // early debugging of promise errors

var program = require('commander');
var bundler = require('../');
var fs = require('fs');
var when = require('when');

var P = require('../lib/p');

program
	.version(bundler.version)
	.usage('[options] <title> [title...]')
	.option('-m, --metabook <metabook.json>',
			'Use article list and structure from the specified json file')
	.option('-d, --directory <dirname>',
			'Don\'t zip up the output bundle; leave it in <dirname>')
	.option('-o, --output <filename>',
			'Save zip to the given <filename>', null)
	.option('-p, --prefix <prefix>',
			'Which wiki prefix to use to resolve the title [enwiki]', 'enwiki')
	.option('-a, --api <url>',
			'Parsoid API root', 'http://parsoid-lb.eqiad.wikimedia.org/')
	.option('-t, --toc <yes|no|auto>',
			'Force presence/absence of toc [auto]', 'auto')
	.option('-L, --lang <2-char lang code>',
			'Force collection to use the given default language', null)
	.option('--title <title>',
			'Set the title of the generated collection', null)
	.option('-v, --verbose',
			'Print verbose progress information')
	.option('-D, --debug',
			'Turn on debugging features (eg, full stack traces on exceptions)');
program.on('--help', function() {
	console.log('  If -o is omitted, creates bundle.zip');
	console.log('  The -m option can be used instead of specifying titles');
});

program.parse(process.argv);

if (program.args.length === 0 && !program.metabook) {
	console.error('Either the -m option or a page title is required.');
	return 1;
}
if (program.metabook && program.args.length > 0) {
	console.error('Too many arguments.');
	return 1;
}

var p = when.resolve();

// Load metabook.json
if (program.metabook) {
	// Load from file and parse JSON
	p = p.then(function() {
		return P.call(fs.readFile, fs, program.metabook, 'utf8');
	}).then(function(data) {
		return JSON.parse(data);
	});
} else {
	// Create a metabook.json from the given prefix and page titles
	p = p.then(function() {
		return bundler.metabook.fromArticles(program.args.map(function(t) {
			return { prefix: program.prefix, title: t };
		}), program);
	});
}

// set default output filename
if ((!program.directory) && (!program.output)) {
	program.output = "bundle.zip";
}

// okay, do it!
p = p.then(function(metabook) {
	if (program.title) {
		metabook.title = program.title;
	}
	return bundler.bundle(metabook, {
		nozip: !!program.directory,
		output: program.directory || program.output,
		verbose: !!program.verbose,
		debug: !!program.debug,
		parsoid: program.api,
		toc: program.toc
	});
}).then(function(status) {
	process.exit(status);
});

p.done(null, function(err) {
    if (program.debug && err.stack) {
        console.error(err.stack);
    } else {
        console.error(err);
    }
    process.exit(1);
});
